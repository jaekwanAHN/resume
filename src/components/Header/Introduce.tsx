const Introduce = () => {
  return (
    <div className="mb-2">
      <p className="text-2xl text-blue-500 sectionTitle">Introduce</p>
      <p>
        협업을 통해 배웁니다. 지도에 마커를 추가하는 과정에서 마커가 렌더링되지
        않는 문제가 있어, 페어 프로그래밍을 통해 문제점을 알 수 있었습니다.
        useEffect내부에서 마커들을 담은 배열을 생성하고 현재 위치를 담은 state를
        변경하여 재랜더링을 통해 랜더링하려는 코드였으나 마커를 담고있는 배열의
        정보가 반영되지 않아 정상적으로 렌더링되지 않았습니다. 그래서 마커들을
        담은 배열을 state로 관리하여 서로 다른 useEffect문에서 동일한 state를
        조작하더라도 지도에 정상적으로 반영되도록 변경하여 문제를 해결했습니다.
        이후 useEffect문들을 Hook으로 리팩터링하여 기존 컴포넌트 코드양을 30%
        줄였습니다. 동료의 입장과 클린 코드를 작성하는 것이 중요하다는 걸 알 수
        있었습니다.
        <br />
        <br />
        사용자가 되어 생각해봅니다. 전체 화면에 로딩 스피너를 보여주던 것을
        isLoading, Suspense 등을 통하여 로딩이 진행중인 영역에만 FallbackUI,
        Skeleton을 적용하여 UX를 향상하고 CLS를 0점으로 개선하였습니다.
        서비스내의 버튼 클릭만으로 모든 서비스를 사용할 수 있도록 NavBar를
        구현하였습니다.
        <br />
        <br />
        인과관계가 명확한 것을 좋아합니다. 공식 문서를 기반으로 ChatGPT와
        레퍼런스, 그리고 스터디를 통한 교차 검사를 통하여 구현을 이해합니다.
        모르는 것은 `내가 하고 싶은 것, 내가 시도해본 것, 내가 막힌 것` 으로
        질문을 구성하여 효과적으로 이해합니다. 알게 된 내용을 공유하는 것을
        좋아하여 10개의 스터디에 참여했었습니다. 최근에는 Next.js 13ver에 대하여
        학습하고 있습니다.
      </p>
    </div>
  );
};
export default Introduce;
